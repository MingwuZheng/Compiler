const int MAX = +1000;
int numbers_to_be_selected, amount;
int f[1000];
int recursive_cal(int cur_pointer, int min) {
	int i;
	if (cur_pointer == amount) {
		printf(f[0]);
		for (i = 1; i < amount; i = i + 1)
			printf(" ", f[i]);
		printf("\n");
		return (0);
	}
	else if (cur_pointer < amount)
	{
		for (i = min; i <= cur_pointer + numbers_to_be_selected - amount + 1; i = i + 1) {
			f[cur_pointer] = i;
			if (recursive_cal(+cur_pointer + 1, i + 1) == -1)
				return (-1);

		}
		return (0);
	}
	else return (-1);
}
void initial(int var, int lenth) {
	int i;
	i = 0;
	do
	{
		f[i] = var;
		i = i + 1;
	} while (i <= lenth)
	return;
}
char echo_lower(char a){
	if(a >= 'a'){
		if(a <= 'z'){
			return (a);
		}
		else {
			printf("ERROR!");
			return ('0');
		}
	}
	else {
		printf("ERROR!");
		return ('0');
	}
} 
void test(){
	const char test_letter_t = 't', test_letter_c = 'c';
	const char test_letter_a = 'a', test_letter_b = 'b';
	const int test_letter_d = 100, test_letter_f = 102;
	const int test_letter_g = 103, test_letter_h = 104;
	char test_letter_i = 'i',test_letter_j = 'j'; 
	char test_letter_k = 'k',test_letter_l = 'l'; 
	int test_letter_m = 109,test_letter_n = 110; 
	int test_letter_e = 111,test_letter_s = 112; 
	int a0[2], a1,___123;
	a[0] = -1;
	a[1] = -a[0] * -2 + ( 'e' - echo_lower(test_letter_c) ) * 1 / 1;
	;
	if(a[1] != 0)
		printf("ERROR!");
	{
		printf(a[0] + 1);
		printf(a[1]);
		printf(test_letter_t);
		printf(test_letter_e);
		printf(test_letter_s);
		printf(test_letter_t);
		printf("\n");
	}
}
void main() {
	int i, j;
	test();
	scanf(numbers_to_be_selected, amount);
	if (amount + 1 > MAX){
		printf("ERROR!\n");
		return (0);
	}
	initial(0, (amount + 1)*1);
	if (recursive_cal(0, 1) == -1) {
		printf("ERROR!\n");
	}
}




